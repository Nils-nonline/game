// The three.js scene: the 3D world where you put objects
const scene = new THREE.Scene();
scene.fog = new THREE.Fog(0xffcc00, 6, 10);
// The camera
const camera = new THREE.PerspectiveCamera(
  60,
  window.innerWidth / window.innerHeight,
  1,
  10000
);
// The renderer: something that draws 3D objects onto the canvas
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setClearColor(0xffcc00, 1);
// Append the renderer canvas into <body>
document.body.appendChild(renderer.domElement);


// A cube we are going to animate
const cube = {
  // The geometry: the shape & size of the object
  geometry: new THREE.BoxGeometry(1, 1, 1),
  // The material: the appearance (color, texture) of the object
  material: new THREE.MeshBasicMaterial({ color: 0x00ff00 })
};
var objects = []
// The mesh: the geometry and material combined, and something we can directly add into the scene (I had to put this line outside of the object literal, so that I could use the geometry and material properties)
cube.mesh = new THREE.Mesh(cube.geometry, cube.material);
cube.mesh.position.y = 0.5
// Add the cube into the scene
previous_generate_centers = [[0, 0]]
generate_center = [0, 0]
scene.add(cube.mesh);

let changAreas = [];


function fill(pos) {
  x = pos[0];
  y = pos[1];
  for (i = 0; i < Math.round(Math.random() * 100) + 10; i++) {
    height = Math.round(Math.random() * 5) + 1
    object = {
      geometry: new THREE.BoxGeometry(2, height, 2),
      material: new THREE.MeshBasicMaterial({ color: 0xff0000 }),
    };
    object.mesh = new THREE.Mesh(object.geometry, object.material);
    scene.add(object.mesh);
    object.mesh.position.y = height / 2;
    object.mesh.position.x = x + Math.round(Math.random() * 100) - 50;
    object.mesh.position.z = y + Math.round(Math.random() * 100) - 50;
    objects.push(object);
  }

  // Store the center position of the newly generated chang area
  changAreas.push({ x, y });
}
fill([0, 0])

change = [0, 0]
ableToJump = true
function jumpend() {
  cube.mesh.position.y = 0.5;
  window.setTimeout(function() { ableToJump = true }, 500)
}

angle = 0


function keypress(event) {
  if (event.keyCode == 37) { change[0] = 3 }
  if (event.keyCode == 38) { change[1] = -3 }
  if (event.keyCode == 39) { change[0] = -3 }
  if (event.keyCode == 40) { change[1] = 3 }
  if (event.keyCode == 32) {
    // 'space' key pressed
    raycaster = new THREE.Raycaster();
    //raycaster.setFromCamera(new THREE.Vector2(0, 0), camera); // Use center of camera view as the origin for raycasting
    cubePosition = cube.mesh.position.clone();
    // Update the raycaster's position and direction using the cube's position and direction
    raycaster.set(cubePosition, new THREE.Vector3(0, 0, -1).applyQuaternion(cube.mesh.quaternion));
    intersects = raycaster.intersectObjects(objects.map((obj) => obj.mesh));
    if (intersects.length > 0) {
      clickedObject = intersects[0].object;
      console.log("Clicked object:", clickedObject);

      if (clickedObject.material.color.getHex() != 0x0000ff) {
        clickedObject.visible = false;
        clickedObject.collidable = false;
        console.log("Object removed from scene.");
      }
    }
  }

  if (ableToJump && event.keyCode == 83) { ableToJump = false; cube.mesh.position.y = 2.6; window.setTimeout(jumpend, 1000) }
}

function keyup(event) {
  if (event.keyCode == 37) { change[0] = 0 }
  if (event.keyCode == 38) { change[1] = 0 }
  if (event.keyCode == 39) { change[0] = 0 }
  if (event.keyCode == 40) { change[1] = 0 }
  if (event.keyCode == 83) { jumpend() }
}


document.onkeydown = keypress
document.onkeyup = keyup
steps = 0.1
function checkCollision() {
  const greenCubeBoundingBox = new THREE.Box3().setFromObject(cube.mesh);

  for (const object of objects) {
    const redCubeBoundingBox = new THREE.Box3().setFromObject(object.mesh);

    if (greenCubeBoundingBox.intersectsBox(redCubeBoundingBox) && object.mesh.visible) {
      // Collision detected
      return true;
      // Do something here, such as handling the collision event
    }
  }

  return false;
}

let hasExitedChangArea = false;

function render() {
  const cubeX = cube.mesh.position.x;
  const cubeZ = cube.mesh.position.z;
  let hasExitedChangArea = true;
  for (const area of changAreas) {
    const changHalfSize = 100 / 2 - 10;
    if (
      cubeX >= area.x - changHalfSize &&
      cubeX <= area.x + changHalfSize &&
      cubeZ >= area.y - changHalfSize &&
      cubeZ <= area.y + changHalfSize
    ) {
      // The green cube is inside a chang area, no need to generate a new chang
      hasExitedChangArea = false;
      break;
    }
  }

  if (hasExitedChangArea) {
    // Generate a new chang at a different position
    fill([cubeX, cubeZ]);
  }
  // Render the scene and the camera
  renderer.render(scene, camera);
  angle += change[0]
  cube.mesh.position.z += Math.cos(angle / 180 * Math.PI) * (change[1] * steps)
  cube.mesh.position.x += Math.sin(angle / 180 * Math.PI) * (change[1] * steps)
  cube.mesh.rotation.y = angle / 180 * Math.PI
  camera.rotation.y = angle / 180 * Math.PI
  camera.position.z = cube.mesh.position.z + Math.cos(angle / 180 * Math.PI) * 5
  camera.position.y = 0.5
  camera.position.x = cube.mesh.position.x + Math.sin(angle / 180 * Math.PI) * 5
  if (checkCollision()) {
    cube.mesh.position.z += Math.cos(angle / 180 * Math.PI) * (-2 * change[1] * steps)
    cube.mesh.position.x += Math.sin(angle / 180 * Math.PI) * (-2 * change[1] * steps)
    cube.mesh.rotation.y = angle / 180 * Math.PI
    camera.rotation.y = angle / 180 * Math.PI
    camera.position.z = cube.mesh.position.z + Math.cos(angle / 180 * Math.PI) * 5
    camera.position.y = 0.5
    camera.position.x = cube.mesh.position.x + Math.sin(angle / 180 * Math.PI) * 5
  }
  // Make it call the render() function about every 1/60 second
  requestAnimationFrame(render);
}

render();